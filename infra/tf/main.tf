# Main Terraform configuration for AKS with Workload Identity
# 
# IMPORTANT: Backend State Management
# ==================================
# The backend state storage (storage account, resource group) is managed via Azure CLI
# in the deployment script, NOT via Terraform. This prevents circular dependencies.
# 
# Backend resources are created by:
# - deploy.sh script using Azure CLI commands
# - Resource group: terraform-state-rg
# - Storage account: tfstateXXXXXX (auto-generated)
# - Container: tfstate
#
terraform {
  required_version = ">= 1.5"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 4.37"
    }
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 3.4"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.37"
    }
  }
  backend "azurerm" {
    # Backend configuration will be provided via backend.hcl file
    # This file is generated by the deployment script and contains:
    # - resource_group_name: terraform-state-rg
    # - storage_account_name: (auto-generated)
    # - container_name: tfstate
    # - key: aks-workloadidentity/terraform.tfstate
  }
}

provider "azurerm" {
  features {}
  subscription_id = var.subscription_id
}

provider "azuread" {}

provider "kubernetes" {
  config_path    = "~/.kube/config"
  config_context = "akswlid-dev-aks"
}

# Data sources
data "azurerm_client_config" "current" {}

# Local values
locals {
  # Azure naming conventions following Microsoft recommendations
  # Pattern: {project}-{environment}-{resource-type-abbreviation}
  # Special cases handle Azure resource naming constraints
  
  resource_prefix = "${var.project_name}-${var.environment}"
  
  # Resource abbreviations following Microsoft Azure naming conventions
  # Reference: https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations
  naming = {
    # Resource Group: rg
    resource_group = "${local.resource_prefix}-rg"
    
    # Azure Kubernetes Service: aks
    aks_cluster = "${local.resource_prefix}-aks"
    
    # Storage Account: st (no hyphens, globally unique, 3-24 chars)
    storage_account = substr(replace(lower("${var.project_name}${var.environment}st"), "-", ""), 0, 24)
    
    # Container Registry: cr (no hyphens, globally unique, 5-50 chars)  
    container_registry = substr(replace(lower("${var.project_name}${var.environment}cr"), "-", ""), 0, 50)
    
    # User Assigned Managed Identity: id
    kubelet_identity  = "${local.resource_prefix}-kubelet-id"
    cluster_identity  = "${local.resource_prefix}-cluster-id" 
    workload_identity = "${local.resource_prefix}-workload-id"
    
    # Storage Container: (descriptive name)
    app_data_container = "app-data"
    
    # Federated Identity Credential: (descriptive name)
    federated_credential = "${local.resource_prefix}-fedcred"
    
    # Network Security Group: nsg (if needed in future)
    network_security_group = "${local.resource_prefix}-nsg"
    
    # Virtual Network: vnet (if needed in future) 
    virtual_network = "${local.resource_prefix}-vnet"
    
    # Subnet: snet (if needed in future)
    subnet = "${local.resource_prefix}-snet"
    
    # Key Vault: kv (if needed in future, globally unique, 3-24 chars)
    key_vault = substr(replace(lower("${var.project_name}-${var.environment}-kv"), "-", ""), 0, 24)
    
    # Log Analytics Workspace: log (if needed in future)
    log_analytics = "${local.resource_prefix}-log"
  }

  common_tags = {
    Environment = var.environment
    Project     = var.project_name
    ManagedBy   = "Terraform"
  }
}

# Resource Group
resource "azurerm_resource_group" "main" {
  name     = local.naming.resource_group
  location = var.location
  tags     = local.common_tags
}

# Storage Account Module
module "storage" {
  source = "./modules/storage"

  resource_group_name      = azurerm_resource_group.main.name
  location                 = azurerm_resource_group.main.location
  environment              = var.environment
  project_name             = var.project_name
  storage_account_name     = local.naming.storage_account
  app_data_container_name  = local.naming.app_data_container
  tags                     = local.common_tags
}

# Container Registry Module
module "container_registry" {
  source = "./modules/container_registry"

  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  environment         = var.environment
  project_name        = var.project_name
  registry_name       = local.naming.container_registry
  tags                = local.common_tags
}

# User Assigned Managed Identity Module
module "managed_identity" {
  source = "./modules/managed_identity"

  resource_group_name    = azurerm_resource_group.main.name
  location               = azurerm_resource_group.main.location
  environment            = var.environment
  project_name           = var.project_name
  kubelet_identity_name  = local.naming.kubelet_identity
  cluster_identity_name  = local.naming.cluster_identity
  workload_identity_name = local.naming.workload_identity
  tags                   = local.common_tags
}

# AKS Cluster Module
module "aks" {
  source = "./modules/aks"

  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  environment         = var.environment
  project_name        = var.project_name
  cluster_name        = local.naming.aks_cluster
  kubernetes_version  = var.kubernetes_version
  node_count          = var.node_count
  vm_size             = var.vm_size

  # Managed Identity IDs
  kubelet_identity_id           = module.managed_identity.kubelet_identity_id
  cluster_identity_id           = module.managed_identity.cluster_identity_id
  cluster_identity_principal_id = module.managed_identity.cluster_identity_principal_id
  workload_identity_id          = module.managed_identity.workload_identity_id

  # Container Registry
  container_registry_id = module.container_registry.registry_id

  # Security Configuration
  enable_azure_rbac        = var.enable_azure_rbac
  disable_local_accounts   = var.disable_local_accounts
  enable_workload_identity = var.enable_workload_identity
  enable_oidc_issuer       = var.enable_oidc_issuer
  admin_group_object_ids   = var.admin_group_object_ids

  tags = local.common_tags
}

# Workload Identity Configuration Module
module "workload_identity" {
  source = "./modules/workload_identity"

  resource_group_name            = azurerm_resource_group.main.name
  aks_cluster_name               = module.aks.cluster_name
  aks_oidc_issuer_url            = module.aks.oidc_issuer_url
  workload_identity_id           = module.managed_identity.workload_identity_id
  workload_identity_name         = module.managed_identity.workload_identity_name
  workload_identity_client_id    = module.managed_identity.workload_identity_client_id
  workload_identity_principal_id = module.managed_identity.workload_identity_principal_id
  environment                    = var.environment
  project_name                   = var.project_name
  federated_credential_name      = local.naming.federated_credential
  namespace                      = var.namespace
  service_account_name           = var.service_account_name

  depends_on = [module.aks]
}
